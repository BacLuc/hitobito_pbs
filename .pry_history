role
role.user
role.person
@group.active_crisis
@group.active_crisis_acknowledgeable? current_user
CustomContent
CustomContent.all
CustomContent.size
CustomContent.count
CustomContent.pluck :keyt
CustomContent.pluck :key
GroupMembershipMailer::CONTENT_GROUP_MEMBERSHIP
Rails.root.join('db', 'seeds')
Wagon
Wagons
Wagons.root
Wagons.first
Wagons.root
Wagons
ls Wagons
Wagons.current_wagon
Wagons.current_wagon.root
SeedFu.seed [Wagons.current_wagon.root.join('db', 'seeds')]
link_to
url_fopr
url_for
app
helpers
Rails.application.routes.url_helpers
Rails.application.routes.url_helpers.url_for
Rails.application.routes.url_helpers.url_for(bund)
mail.body
is_expected.to match(%r{in der Gruppe <a href="http://test.host/groups/#{group.id}">Pfadibewegung Schweiz</a> eingeleitet.})
is_expected.to match(%r{in der Gruppe <a href="http://test.host/groups/#{bund.id}">Pfadibewegung Schweiz</a> eingeleitet.})
Delayed::JOb
Delayed::Job
Delayed::Job.all
ActionMailer::Base.deliveries
ls ActionMailer::Base
groups(:be).active_crisis
crisis
crisis.created_at
> 3.days.ago
crisis.created_at > 3.days.ago
crisis.created_at < 3.days.ago
crisis
crisis.group
$ crisis
crisis
crisis.created_at 
crisis.created_at  < 3.days.ago
crisis.update(acknowledged: true)
crisis.update!(acknowledged: true)
CrisisMailer.acknowledged(@crisis, current_user).deliver_later
person
person.groups_with_permission(:layer_and_below_full)
active_crises
active_crises.collect(&:group)
user.layer_ids_with_crisis
condition.or('groups.layer_group_id = ?', user.layer_ids_with_crisis)
x = append_group_conditions_without_crisis(condition)
x
accessible_conditions
kantonalverband
crisis
crisis.group
role_type
role_type?
$ role_type?
ls 
@user_context.groups_with_permissions(:crisis_trigger)
@user_context.group_with_permissions(:crisis_trigger)
user.group_with_permissions(:crisis_trigger)
uiser_context.group_with_permissions(:crisis_trigger)
user_context.group_with_permissions(:crisis_trigger)
cd user_context
ls
permissions
@permission_group_ids
@permission_layer_ids
@user
user_context
user_context.user.groups_with_permission(:crisis_trigger)
subject.group
subject.group.layer_hierarchy.collect(&:id)
permission_in_layers?
permission_in_layers?(:group_read)
$ permission_in_layers?
$ user_layer_ids
user_context.permission_layer_ids
user_context.permission_layer_ids(:crisis_trigger)
$ user_context.permission_layer_ids(:crisis_trigger)
$ user_context.permission_layer_ids
$ group_ids_with_permission
$ user_context.group_ids_with_permission
cd user_context
@permission_layer_ids
permission_in_layers?(subject.group.layer_hierarchy.collect(&:id))
subject
crisis
subject
crisis
crisis.group
role
role.permissions
subject.group
permission_in_layers?
permission_in_layers?(subject.group.layer_hierarchy.collect(&:id))
$ permission_in_layers?
user_layer_ids
subject.group.layer_hierarchy.collect(&:id)
subject.group
role.permissions
crisis
crisis.group
